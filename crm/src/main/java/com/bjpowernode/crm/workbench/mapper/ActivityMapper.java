package com.bjpowernode.crm.workbench.mapper;

import com.bjpowernode.crm.workbench.domain.Activity;
import com.bjpowernode.crm.workbench.domain.FunnelVO;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Apr 26 21:31:13 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Apr 26 21:31:13 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Apr 26 21:31:13 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Apr 26 21:31:13 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Apr 26 21:31:13 CST 2022
     */
    int updateByPrimaryKey(Activity record);

    /**
     * 保存创建的市场活动
     */
    int insertActivity(Activity activity);

    /**
     * 根据条件分页查询市场活动的列表
     */
    List<Activity> selectActivityByConditionForPage(Map<String, Object> map);

    /**
     * 根据条件查询市场活动的总条数
     */
    int selectCountOfActivityByCondition(Map<String, Object> map);

    /**
     * 根据ids批量删除市场活动
     */
    int deleteActivityByIds(String[] ids);

    /**
     * 根据id查询市场活动的信息
     */
    Activity selectActivityById(String id);

    /**
     * 保存修改的市场活动
     */
    int updateActivity(Activity activity);

    /**
     * 查询所有的市场活动
     */
    List<Activity> selectAllActivities();

    /**
     * 查询选中的市场活动
     */
    List<Activity> selectCheckedActivitiesByIds(String[] ids);

    /**
     * 批量保存创建的市场活动
     */
    int insertActivityByList(List<Activity> activityList);

    /**
     * 根据id查询市场活动的明细信息
     */
    Activity selectActivityForDetailById(String id);

    /**
     * 根据clueId查询该线索相关联的市场活动的明细信息
     */
    List<Activity> selectActivityForDetailByClueId(String clueId);

    /**
     * 根据name模糊查询市场活动，并且把已经和线索关联的市场活动排除
     */
    List<Activity> selectActivityForDetailByNameClueId(Map<String, Object> map);

    /**
     *  根据ids查询市场活动的明细信息
     */
    List<Activity> selectActivityForDetailByIds(String[] ids);

    /**
     * 根据name模糊查询市场活动，并且查询那些跟clueId关联过的市场活动
     */
    List<Activity> selectActivityForConvertByNameClueId(Map<String, Object> map);

    /**
     * 根据contactsId查询该线索相关联的市场活动的明细信息
     */
    List<Activity> selectActivityForDetailByContactsId(String contactsId);

    /**
     * 根据name模糊查询市场活动，并且把已经和联系人关联的市场活动排除
     */
    List<Activity> selectActivityForDetailByNameContactsId(Map<String, Object> map);

    /**
     * 根据市场活动名称模糊查询，用于创建交易
     */
    List<Activity> selectActivityByFuzzyName(String activityName);

    /**
     * 查询市场活动表中各个所有者的数据量
     * @return 数据集合
     */
    List<FunnelVO> selectCountOfActivityGroupByOwner();
}