package com.bjpowernode.crm.workbench.mapper;

import com.bjpowernode.crm.workbench.domain.FunnelVO;
import com.bjpowernode.crm.workbench.domain.Tran;

import java.util.List;
import java.util.Map;

public interface TranMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_tran
     *
     * @mbggenerated Thu Jun 16 10:42:25 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_tran
     *
     * @mbggenerated Thu Jun 16 10:42:25 CST 2022
     */
    int insert(Tran record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_tran
     *
     * @mbggenerated Thu Jun 16 10:42:25 CST 2022
     */
    int insertSelective(Tran record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_tran
     *
     * @mbggenerated Thu Jun 16 10:42:25 CST 2022
     */
    Tran selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_tran
     *
     * @mbggenerated Thu Jun 16 10:42:25 CST 2022
     */
    int updateByPrimaryKeySelective(Tran record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_tran
     *
     * @mbggenerated Thu Jun 16 10:42:25 CST 2022
     */
    int updateByPrimaryKey(Tran record);

    /**
     * 保存创建的交易
     * @param tran
     * @return
     */
    int insertTran(Tran tran);

    /**
     * 根据条件分页查询交易信息
     */
    List<Tran> selectTranByConditionForPage(Map<String, Object> map);

    /**
     * 根据条件查询交易条数
     */
    int selectCountOfTranByCondition(Map<String, Object> map);

    /**
     * 根据交易id查询交易
     */
    Tran selectTranById(String id);

    /**
     * 根据交易id修改交易信息
     */
    int updateTranById(Tran tran);

    /**
     * 根据交易id删除交易信息
     */
    int deleteTranByIds(String[] id);

    /**
     * 根据id查询交易的明细信息
     */
    Tran selectTranForDetailById(String id);

    /**
     * 根据customerId查询交易明细
     * @param customerId
     * @return
     */
    List<Tran> selectTranForDetailByCustomerId(String customerId);

    /**
     * 根据id删除相关交易
     * @param id
     * @return
     */
    int deleteTranById(String id);

    /**
     * 根据contactsId查询交易明细
     * @param contactsId
     * @return
     */
    List<Tran> selectTranForDetailByContactsId(String contactsId);

    /**
     * 查询交易表中各个阶段的数据量
     * @return
     */
    List<FunnelVO> selectCountOfTranGroupByStage();
}